{"version":3,"sources":["components/LoginScreen.js","components/GameScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["LoginScreen","onFormSubmit","e","preventDefault","react_default","a","createElement","id","onSubmit","this","htmlFor","className","type","value","React","Component","GameScreen","autoComplete","App","components_LoginScreen","components_GameScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LA2BeA,oNAvBXC,aAAe,SAACC,GACZA,EAAEC,0FAIF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,WAAWC,SAAUC,KAAKR,cAC/BG,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,oBAAf,SAGAN,EAAAC,EAAAC,cAAA,SAAOK,UAAU,eAAeJ,GAAG,qBACnCH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASD,UAAU,kBAAkBJ,GAAG,aAAaM,MAAM,uBAE3ET,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMK,UAAU,aAAaJ,GAAG,yBAnBtBO,IAAMC,YC6BjBC,mLA1BP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,QACXH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,WACXH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MACJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACJH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUI,UAAU,eACxBP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYI,UAAU,iBAC1BP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBAAqBJ,GAAG,YACnCH,EAAAC,EAAAC,cAAA,qCAIZF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,YAAYU,aAAa,OAC9Bb,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,cAAf,aAAwCN,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOL,GAAG,iBAGtEH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACJH,EAAAC,EAAAC,cAAA,mCArBCQ,IAAMC,WCchBG,mLATP,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,cALEL,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8e3847c2.chunk.js","sourcesContent":["import React from 'react';\n\nclass LoginScreen extends React.Component {\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n    };\n\n    render() {\n        return (\n            <div id=\"signDiv\">\n                <h2>MMO Progres Fight</h2>\n                <form id=\"signForm\" onSubmit={this.onFormSubmit}>\n                    <label htmlFor=\"signDiv-username\">\n                        Nick:\n                    </label>\n                    <input className=\"form-control\" id=\"signDiv-username\"/>\n                    <br/>\n                    <input type=\"submit\" className=\"btn btn-success\" id=\"signDiv-in\" value=\"Přihlásit\"/>\n                </form>\n                <br/>\n                <span className=\"color-info\" id=\"message-area\"/>\n            </div>\n        );\n    }\n}\n\nexport default LoginScreen;","import React from 'react';\n\nclass GameScreen extends React.Component {\n\n    render() {\n        return (\n            <div id=\"gameDiv\">\n                <canvas id=\"ctx\"/>\n                <canvas id=\"ctx-ui\"/>\n                <div id=\"ui\">\n                    <div id=\"chat\">\n                        <div id=\"chatdiv\" className=\"chat-window\">\n                            <div id=\"chat-text\" className=\"chat-messages\">\n                                <div className=\"chat-messages-text\" id=\"messages\">\n                                    <p>Vítejte na serveru</p>\n                                </div>\n                            </div>\n                        </div>\n                        <form id=\"chat-form\" autoComplete=\"off\">\n                            <label htmlFor=\"chat-input\">Všem</label><input type=\"text\" id=\"chat-input\"/>\n                        </form>\n                    </div>\n                    <div id=\"position\">\n                        <span>[100,100]</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GameScreen;","import React, {Component} from 'react';\nimport './App.css';\nimport LoginScreen from \"./LoginScreen\";\nimport GameScreen from \"./GameScreen\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <LoginScreen/>\n                <GameScreen/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}